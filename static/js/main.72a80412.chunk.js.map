{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["numRows","numCols","createEmptyGrid","rows","i","push","Array","from","App","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","simulate","useCallback","produce","gridCopy","j","neighbors","setTimeout","className","style","color","textDecoration","href","target","onClick","Math","random","display","gridTemplateColumns","map","cols","newGrid","width","height","background","undefined","border","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72a80412.chunk.js","sourcesContent":["import './App.css';\r\nimport { useState, useRef, useCallback } from 'react';\r\nimport produce from 'immer';\r\n\r\nconst numRows = 50;\r\nconst numCols = 50;\r\n\r\nconst createEmptyGrid = () => {\r\n   let rows = [];\r\n   for (let i = 0; i < numRows; i++) {\r\n      rows.push(Array.from(Array(numCols), () => 0));\r\n   }\r\n   return rows;\r\n};\r\nfunction App() {\r\n   const [grid, setGrid] = useState(createEmptyGrid());\r\n   const [running, setRunning] = useState(false);\r\n   const [speed, setSpeed] = useState(250);\r\n\r\n   const runningRef = useRef();\r\n   runningRef.current = running;\r\n\r\n   const simulate = useCallback(() => {\r\n      if (!runningRef.current) {\r\n         return;\r\n      }\r\n      setGrid((grid) => {\r\n         return produce(grid, (gridCopy) => {\r\n            for (var i = 0; i < numRows; i++) {\r\n               for (var j = 0; j < numCols; j++) {\r\n                  let neighbors = 0;\r\n                  //left cell\r\n                  if (j) {\r\n                     neighbors = neighbors + grid[i][j - 1];\r\n                  }\r\n                  //right cell\r\n                  if (j < numCols - 1) {\r\n                     neighbors = neighbors + grid[i][j + 1];\r\n                  }\r\n                  //top cell\r\n                  if (i) {\r\n                     neighbors = neighbors + grid[i - 1][j];\r\n                  }\r\n                  //bottom cell\r\n                  if (i < numRows - 1) {\r\n                     neighbors = neighbors + grid[i + 1][j];\r\n                  }\r\n                  //top right cell\r\n                  if (j < numCols - 1 && i) {\r\n                     neighbors = neighbors + grid[i - 1][j + 1];\r\n                  }\r\n                  //top left cell\r\n                  if (j && i) {\r\n                     neighbors = neighbors + grid[i - 1][j - 1];\r\n                  }\r\n                  //bottom right cell\r\n                  if (i < numRows - 1 && j < numCols - 1) {\r\n                     neighbors = neighbors + grid[i + 1][j + 1];\r\n                  }\r\n                  //bottom left cell\r\n                  if (i < numRows - 1 && j) {\r\n                     neighbors = neighbors + grid[i + 1][j - 1];\r\n                  }\r\n                  if (neighbors < 2 || neighbors > 3) {\r\n                     gridCopy[i][j] = 0;\r\n                  } else if (grid[i][j] === 0 && neighbors === 3) {\r\n                     gridCopy[i][j] = 1;\r\n                  }\r\n               }\r\n            }\r\n         });\r\n      });\r\n\r\n      setTimeout(simulate, 250);\r\n   }, []);\r\n\r\n   return (\r\n      <div className='container'>\r\n         <div className='heading'>\r\n            <h1>Conway's Game of Life</h1>\r\n            <p>Select few cells and clik the start button</p>\r\n         </div>\r\n         <div className='button-wrapper'>\r\n            <a\r\n               style={{ color: 'white', textDecoration: 'none' }}\r\n               href='https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life'\r\n               target='_blank'\r\n            >\r\n               about\r\n            </a>\r\n            <a\r\n               onClick={() => {\r\n                  setRunning(!running);\r\n                  if (!running) {\r\n                     runningRef.current = true;\r\n                     simulate();\r\n                  }\r\n               }}\r\n            >\r\n               {running ? 'stop' : 'start'}\r\n            </a>\r\n            <a onClick={() => setGrid(createEmptyGrid())}>clear</a>\r\n            <a\r\n               onClick={() => {\r\n                  let rows = [];\r\n                  for (let i = 0; i < numRows; i++) {\r\n                     rows.push(\r\n                        Array.from(Array(numCols), () =>\r\n                           Math.random() > 0.9 ? 1 : 0\r\n                        )\r\n                     );\r\n                  }\r\n                  setGrid(rows);\r\n               }}\r\n            >\r\n               random\r\n            </a>\r\n         </div>\r\n\r\n         <div\r\n            className='App'\r\n            style={{\r\n               display: 'grid',\r\n               gridTemplateColumns: `repeat(${numCols}, 20px)`,\r\n            }}\r\n         >\r\n            {grid.map((rows, i) =>\r\n               rows.map((cols, j) => (\r\n                  <div\r\n                     className='cells'\r\n                     key={`${i}-${j}`}\r\n                     onClick={() => {\r\n                        const newGrid = produce(grid, (newGrid) => {\r\n                           newGrid[i][j] = grid[i][j] ? 0 : 1;\r\n                        });\r\n                        setGrid(newGrid);\r\n                     }}\r\n                     style={{\r\n                        width: 20,\r\n                        height: 20,\r\n                        background: grid[i][j] ? 'white' : undefined,\r\n                        border: 'solid 1px blue',\r\n                     }}\r\n                  />\r\n               ))\r\n            )}\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}